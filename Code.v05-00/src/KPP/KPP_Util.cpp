/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Auxiliary Routines File                                          */
/*                                                                  */
/* Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  */
/*       (http://www.cs.vt.edu/~asandu/Software/KPP)                */
/* KPP is distributed under GPL, the general public licence         */
/*       (http://www.gnu.org/copyleft/gpl.html)                     */
/* (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           */
/* (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            */
/*     With important contributions from:                           */
/*        M. Damian, Villanova University, USA                      */
/*        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany */
/*                                                                  */
/* File                 : KPP_Util.c                                */
/* Time                 : Tue Sep  4 17:12:00 2018                  */
/* Equation file        : KPP.kpp                                   */
/* Output root filename : KPP                                       */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "KPP/KPP_Parameters.h"
#include "KPP/KPP_Global.h"
#include "KPP/KPP_Sparse.h"
#include "KPP/KPP.hpp"


/* User INLINED Utility Functions                                   */

/* End INLINED Utility Functions                                    */

/* Utility Functions from KPP_HOME/util/util                        */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* UTIL - Utility functions                                         */
/*   Arguments :                                                    */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

/*
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
*/
double min( double x, double y )
{
  return ( x <= y ) ? x : y;
}

double max( double x, double y )
{
  return ( x >= y ) ? x : y;
}

static FILE *fpDat = 0;

int InitSaveData()
{
  fpDat = fopen("KPP.dat", "w");
  if( fpDat == 0 ) {
    printf("\n Can't create file : KPP.dat");
    exit(1);
  }
  return 0;
}

int SaveData()
{
int i;

  fprintf( fpDat, "%6.1f ", TIME/3600.0 );
  for( i = 0; i < NLOOKAT; i++ )
    fprintf( fpDat, "%24.16e ", C[ LOOKAT[i] ] );
  fprintf( fpDat, "\n");
  return 0;
}

int CloseSaveData()
{
  fclose( fpDat );
  return 0;
}

int GenerateMatlab( char * prefix )
{
int i;
FILE *fpMatlab;
  
  fpMatlab = fopen("KPP.m", "w");
  if( fpMatlab == 0 ) {
    printf("\n Can't create file : KPP.m");
    exit(1);
  }

  fprintf(fpMatlab, "load KPP.dat;\n");
  fprintf(fpMatlab, "%sc = KPP;\n", prefix);
  fprintf(fpMatlab, "clear KPP;\n");
  fprintf(fpMatlab, "%st=%sc(:,1);\n", prefix, prefix);
  fprintf(fpMatlab, "%sc(:,1)=[];\n", prefix);
  
  for( i = 0; i < NLOOKAT; i++ )
    fprintf( fpMatlab, "%s%s = %sc(:,%d);\n", 
            prefix, SPC_NAMES[LOOKAT[i]], 
            prefix, i+1 );
  
  fclose( fpMatlab );
  return 0;
}

/* End Utility Functions from KPP_HOME/util/util                    */
/* End of UTIL function                                             */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Shuffle_user2kpp - function to copy concentrations from USER to KPP */
/*   Arguments :                                                    */
/*      V_USER    - Concentration of variable species in USER's order */
/*      V         - Concentrations of variable species (local)      */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

void Shuffle_user2kpp( 
  double V_USER[],                       /* Concentration of variable species in USER's order */
  double V[]                             /* Concentrations of variable species (local) */
)
{
  V[60] = V_USER[0];
  V[67] = V_USER[1];
  V[109] = V_USER[2];
  V[8] = V_USER[3];
  V[89] = V_USER[4];
  V[66] = V_USER[5];
  V[33] = V_USER[6];
  V[14] = V_USER[7];
  V[111] = V_USER[8];
  V[64] = V_USER[9];
  V[125] = V_USER[10];
  V[80] = V_USER[11];
  V[12] = V_USER[12];
  V[84] = V_USER[13];
  V[62] = V_USER[14];
  V[53] = V_USER[15];
  V[112] = V_USER[16];
  V[78] = V_USER[17];
  V[95] = V_USER[18];
  V[13] = V_USER[19];
  V[90] = V_USER[20];
  V[20] = V_USER[21];
  V[120] = V_USER[22];
  V[37] = V_USER[23];
  V[94] = V_USER[24];
  V[52] = V_USER[25];
  V[91] = V_USER[26];
  V[77] = V_USER[27];
  V[51] = V_USER[28];
  V[42] = V_USER[29];
  V[43] = V_USER[30];
  V[19] = V_USER[31];
  V[81] = V_USER[32];
  V[106] = V_USER[33];
  V[76] = V_USER[34];
  V[92] = V_USER[35];
  V[21] = V_USER[36];
  V[63] = V_USER[37];
  V[9] = V_USER[38];
  V[110] = V_USER[39];
  V[104] = V_USER[40];
  V[97] = V_USER[41];
  V[126] = V_USER[42];
  V[22] = V_USER[43];
  V[93] = V_USER[44];
  V[40] = V_USER[45];
  V[108] = V_USER[46];
  V[6] = V_USER[47];
  V[5] = V_USER[48];
  V[41] = V_USER[49];
  V[114] = V_USER[50];
  V[121] = V_USER[51];
  V[115] = V_USER[52];
  V[117] = V_USER[53];
  V[118] = V_USER[54];
  V[119] = V_USER[55];
  V[122] = V_USER[56];
  V[7] = V_USER[57];
  V[50] = V_USER[58];
  V[74] = V_USER[59];
  V[26] = V_USER[60];
  V[1] = V_USER[61];
  V[79] = V_USER[62];
  V[55] = V_USER[63];
  V[27] = V_USER[64];
  V[87] = V_USER[65];
  V[101] = V_USER[66];
  V[100] = V_USER[67];
  V[32] = V_USER[68];
  V[15] = V_USER[69];
  V[16] = V_USER[70];
  V[103] = V_USER[71];
  V[82] = V_USER[72];
  V[86] = V_USER[73];
  V[34] = V_USER[74];
  V[47] = V_USER[75];
  V[24] = V_USER[76];
  V[71] = V_USER[77];
  V[35] = V_USER[78];
  V[107] = V_USER[79];
  V[28] = V_USER[80];
  V[29] = V_USER[81];
  V[113] = V_USER[82];
  V[102] = V_USER[83];
  V[59] = V_USER[84];
  V[123] = V_USER[85];
  V[2] = V_USER[86];
  V[54] = V_USER[87];
  V[10] = V_USER[88];
  V[58] = V_USER[89];
  V[44] = V_USER[90];
  V[96] = V_USER[91];
  V[49] = V_USER[92];
  V[83] = V_USER[93];
  V[38] = V_USER[94];
  V[39] = V_USER[95];
  V[48] = V_USER[96];
  V[98] = V_USER[97];
  V[99] = V_USER[98];
  V[61] = V_USER[99];
  V[30] = V_USER[100];
  V[68] = V_USER[101];
  V[31] = V_USER[102];
  V[3] = V_USER[103];
  V[45] = V_USER[104];
  V[36] = V_USER[105];
  V[4] = V_USER[106];
  V[46] = V_USER[107];
  V[69] = V_USER[108];
  V[73] = V_USER[109];
  V[56] = V_USER[110];
  V[65] = V_USER[111];
  V[70] = V_USER[112];
  V[72] = V_USER[113];
  V[75] = V_USER[114];
  V[25] = V_USER[115];
  V[116] = V_USER[116];
  V[57] = V_USER[117];
  V[105] = V_USER[118];
  V[23] = V_USER[119];
  V[17] = V_USER[120];
  V[11] = V_USER[121];
  V[18] = V_USER[122];
  V[85] = V_USER[123];
  V[124] = V_USER[124];
  V[88] = V_USER[125];
}

/* End of Shuffle_user2kpp function                                 */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Shuffle_kpp2user - function to restore concentrations from KPP to USER */
/*   Arguments :                                                    */
/*      V         - Concentrations of variable species (local)      */
/*      V_USER    - Concentration of variable species in USER's order */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

void Shuffle_kpp2user( 
  double V[],                            /* Concentrations of variable species (local) */
  double V_USER[]                        /* Concentration of variable species in USER's order */
)
{
  V_USER[0] = V[60];
  V_USER[1] = V[67];
  V_USER[2] = V[109];
  V_USER[3] = V[8];
  V_USER[4] = V[89];
  V_USER[5] = V[66];
  V_USER[6] = V[33];
  V_USER[7] = V[14];
  V_USER[8] = V[111];
  V_USER[9] = V[64];
  V_USER[10] = V[125];
  V_USER[11] = V[80];
  V_USER[12] = V[12];
  V_USER[13] = V[84];
  V_USER[14] = V[62];
  V_USER[15] = V[53];
  V_USER[16] = V[112];
  V_USER[17] = V[78];
  V_USER[18] = V[95];
  V_USER[19] = V[13];
  V_USER[20] = V[90];
  V_USER[21] = V[20];
  V_USER[22] = V[120];
  V_USER[23] = V[37];
  V_USER[24] = V[94];
  V_USER[25] = V[52];
  V_USER[26] = V[91];
  V_USER[27] = V[77];
  V_USER[28] = V[51];
  V_USER[29] = V[42];
  V_USER[30] = V[43];
  V_USER[31] = V[19];
  V_USER[32] = V[81];
  V_USER[33] = V[106];
  V_USER[34] = V[76];
  V_USER[35] = V[92];
  V_USER[36] = V[21];
  V_USER[37] = V[63];
  V_USER[38] = V[9];
  V_USER[39] = V[110];
  V_USER[40] = V[104];
  V_USER[41] = V[97];
  V_USER[42] = V[126];
  V_USER[43] = V[22];
  V_USER[44] = V[93];
  V_USER[45] = V[40];
  V_USER[46] = V[108];
  V_USER[47] = V[6];
  V_USER[48] = V[5];
  V_USER[49] = V[41];
  V_USER[50] = V[114];
  V_USER[51] = V[121];
  V_USER[52] = V[115];
  V_USER[53] = V[117];
  V_USER[54] = V[118];
  V_USER[55] = V[119];
  V_USER[56] = V[122];
  V_USER[57] = V[7];
  V_USER[58] = V[50];
  V_USER[59] = V[74];
  V_USER[60] = V[26];
  V_USER[61] = V[1];
  V_USER[62] = V[79];
  V_USER[63] = V[55];
  V_USER[64] = V[27];
  V_USER[65] = V[87];
  V_USER[66] = V[101];
  V_USER[67] = V[100];
  V_USER[68] = V[32];
  V_USER[69] = V[15];
  V_USER[70] = V[16];
  V_USER[71] = V[103];
  V_USER[72] = V[82];
  V_USER[73] = V[86];
  V_USER[74] = V[34];
  V_USER[75] = V[47];
  V_USER[76] = V[24];
  V_USER[77] = V[71];
  V_USER[78] = V[35];
  V_USER[79] = V[107];
  V_USER[80] = V[28];
  V_USER[81] = V[29];
  V_USER[82] = V[113];
  V_USER[83] = V[102];
  V_USER[84] = V[59];
  V_USER[85] = V[123];
  V_USER[86] = V[2];
  V_USER[87] = V[54];
  V_USER[88] = V[10];
  V_USER[89] = V[58];
  V_USER[90] = V[44];
  V_USER[91] = V[96];
  V_USER[92] = V[49];
  V_USER[93] = V[83];
  V_USER[94] = V[38];
  V_USER[95] = V[39];
  V_USER[96] = V[48];
  V_USER[97] = V[98];
  V_USER[98] = V[99];
  V_USER[99] = V[61];
  V_USER[100] = V[30];
  V_USER[101] = V[68];
  V_USER[102] = V[31];
  V_USER[103] = V[3];
  V_USER[104] = V[45];
  V_USER[105] = V[36];
  V_USER[106] = V[4];
  V_USER[107] = V[46];
  V_USER[108] = V[69];
  V_USER[109] = V[73];
  V_USER[110] = V[56];
  V_USER[111] = V[65];
  V_USER[112] = V[70];
  V_USER[113] = V[72];
  V_USER[114] = V[75];
  V_USER[115] = V[25];
  V_USER[116] = V[116];
  V_USER[117] = V[57];
  V_USER[118] = V[105];
  V_USER[119] = V[23];
  V_USER[120] = V[17];
  V_USER[121] = V[11];
  V_USER[122] = V[18];
  V_USER[123] = V[85];
  V_USER[124] = V[124];
  V_USER[125] = V[88];
}

/* End of Shuffle_kpp2user function                                 */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* GetMass - compute total mass of selected atoms                   */
/*   Arguments :                                                    */
/*      CL        - Concentration of all species (local)            */
/*      Mass      - value of mass balance                           */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

void GetMass( 
  double CL[],                           /* Concentration of all species (local) */
  double Mass[]                          /* value of mass balance */
)
{
}

/* End of GetMass function                                          */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* ComputeFamilies - function to calculate user-defined Prod/Loss   */
/* families                                                         */
/*   Arguments :                                                    */
/*      V         - Concentration of variable species (local)       */
/*      F         - Concentration of fixed species (local)          */
/*      RCT       - Reaction rate                                   */
/*      familyRate- Accumulated user-defined prod/loss families     */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

void ComputeFamilies( const double V[], const double F[], \
                      const double RCT[], double familyRate[] )
{

    /* Local variables                                                  */
    double A[NREACT];                        /* Rate for each equation */

    /* Computation of equation rates                                    */
    A[0] = RCT[0]*V[114]*V[119];
    A[1] = RCT[1]*V[119]*V[122];
    A[2] = RCT[2]*V[119]*V[120];
    A[3] = RCT[3]*V[119]*V[121];
    A[4] = RCT[4]*V[119]*V[126];
    A[5] = RCT[5]*V[122]*V[122];
    A[6] = RCT[6]*V[122]*V[122];
    A[7] = RCT[7]*V[120]*V[122];
    A[8] = RCT[8]*V[78]*V[122];
    A[9] = RCT[9]*V[114]*V[120];
    A[10] = RCT[10]*V[120]*V[120];
    A[11] = RCT[11]*V[122]*V[125];
    A[12] = RCT[12]*V[64]*V[122];
    A[13] = RCT[13]*V[114]*V[126];
    A[14] = RCT[14]*V[120]*V[126];
    A[15] = RCT[15]*V[126]*V[126];
    A[16] = RCT[16]*V[126]*V[126];
    A[17] = RCT[17]*V[22]*V[122];
    A[18] = RCT[18]*V[22]*V[122];
    A[19] = RCT[19]*V[36]*V[122];
    A[20] = RCT[20]*V[36]*V[122];
    A[21] = RCT[21]*V[111]*V[122];
    A[22] = RCT[22]*V[121]*V[122];
    A[23] = RCT[23]*V[90]*V[122];
    A[24] = RCT[24]*V[114]*V[122];
    A[25] = RCT[25]*V[13]*V[122];
    A[26] = RCT[26]*V[120]*V[121];
    A[27] = RCT[27]*V[20];
    A[28] = RCT[28]*V[20]*V[122];
    A[29] = RCT[29]*V[115]*V[120];
    A[30] = RCT[30]*V[114]*V[115];
    A[31] = RCT[31]*V[115]*V[122];
    A[32] = RCT[32]*V[115]*V[121];
    A[33] = RCT[33]*V[41];
    A[34] = RCT[34]*V[122]*F[3];
    A[35] = RCT[35]*V[122]*F[4];
    A[36] = RCT[36]*V[115]*V[121];
    A[37] = RCT[37]*V[111]*V[115];
    A[38] = RCT[38]*V[109]*V[122];
    A[39] = RCT[39]*V[109]*V[115];
    A[40] = RCT[40]*V[110]*V[121];
    A[41] = RCT[41]*V[7];
    A[42] = RCT[42]*V[110]*V[114];
    A[43] = RCT[43]*V[33]*V[122];
    A[44] = RCT[44]*V[80]*V[114];
    A[45] = RCT[45]*V[14]*V[122];
    A[46] = RCT[46]*V[14]*V[122];
    A[47] = RCT[47]*V[60]*V[114];
    A[48] = RCT[48]*V[74]*V[114];
    A[49] = RCT[49]*V[8]*V[122];
    A[50] = RCT[50]*V[100]*V[114];
    A[51] = RCT[51]*V[100]*V[114];
    A[52] = RCT[52]*V[87]*V[114];
    A[53] = RCT[53]*V[89]*V[114];
    A[54] = RCT[54]*V[81]*V[114];
    A[55] = RCT[55]*V[86]*V[114];
    A[56] = RCT[56]*V[86];
    A[57] = RCT[57]*V[71]*V[114];
    A[58] = RCT[58]*V[93]*V[114];
    A[59] = RCT[59]*V[93];
    A[60] = RCT[60]*V[76]*V[114];
    A[61] = RCT[61]*V[66]*V[114];
    A[62] = RCT[62]*V[94]*V[114];
    A[63] = RCT[63]*V[94]*V[115];
    A[64] = RCT[64]*V[91]*V[115];
    A[65] = RCT[65]*V[77]*V[115];
    A[66] = RCT[66]*V[77]*V[114];
    A[67] = RCT[67]*V[77]*V[121];
    A[68] = RCT[68]*V[77]*V[120];
    A[69] = RCT[69]*V[51]*V[115];
    A[70] = RCT[70]*V[51]*V[114];
    A[71] = RCT[71]*V[51]*V[120];
    A[72] = RCT[72]*V[51]*V[126];
    A[73] = RCT[73]*V[91]*V[119];
    A[74] = RCT[74]*V[91]*V[122];
    A[75] = RCT[75]*V[42]*V[114];
    A[76] = RCT[76]*V[42]*V[120];
    A[77] = RCT[77]*V[42]*V[126];
    A[78] = RCT[78]*V[94]*V[94];
    A[79] = RCT[79]*V[79]*V[114];
    A[80] = RCT[80]*V[8]*V[115];
    A[81] = RCT[81]*V[101]*V[122];
    A[82] = RCT[82]*V[122]*F[0];
    A[83] = RCT[83]*V[103]*V[122];
    A[84] = RCT[84]*V[82]*V[121];
    A[85] = RCT[85]*V[1];
    A[86] = RCT[86]*V[92]*V[121];
    A[87] = RCT[87]*V[50];
    A[88] = RCT[88]*V[82]*V[114];
    A[89] = RCT[89]*V[92]*V[114];
    A[90] = RCT[90]*V[103]*V[115];
    A[91] = RCT[91]*V[67]*V[122];
    A[92] = RCT[92]*V[60]*V[126];
    A[93] = RCT[93]*V[74]*V[126];
    A[94] = RCT[94]*V[100]*V[120];
    A[95] = RCT[95]*V[87]*V[120];
    A[96] = RCT[96]*V[89]*V[120];
    A[97] = RCT[97]*V[81]*V[120];
    A[98] = RCT[98]*V[86]*V[120];
    A[99] = RCT[99]*V[71]*V[120];
    A[100] = RCT[100]*V[93]*V[120];
    A[101] = RCT[101]*V[76]*V[120];
    A[102] = RCT[102]*V[66]*V[120];
    A[103] = RCT[103]*V[94]*V[120];
    A[104] = RCT[104]*V[79]*V[120];
    A[105] = RCT[105]*V[104]*V[122];
    A[106] = RCT[106]*V[80]*V[126];
    A[107] = RCT[107]*V[104]*V[115];
    A[108] = RCT[108]*V[100]*V[126];
    A[109] = RCT[109]*V[87]*V[126];
    A[110] = RCT[110]*V[89]*V[126];
    A[111] = RCT[111]*V[81]*V[126];
    A[112] = RCT[112]*V[86]*V[126];
    A[113] = RCT[113]*V[86]*V[86];
    A[114] = RCT[114]*V[83]*V[126];
    A[115] = RCT[115]*V[71]*V[126];
    A[116] = RCT[116]*V[93]*V[126];
    A[117] = RCT[117]*V[76]*V[126];
    A[118] = RCT[118]*V[66]*V[126];
    A[119] = RCT[119]*V[94]*V[126];
    A[120] = RCT[120]*V[79]*V[126];
    A[121] = RCT[121]*V[122]*F[1];
    A[122] = RCT[122]*V[47]*V[122];
    A[123] = RCT[123]*V[80]*V[80];
    A[124] = RCT[124]*V[80]*V[80];
    A[125] = RCT[125]*V[80]*V[120];
    A[126] = RCT[126]*V[60]*V[120];
    A[127] = RCT[127]*V[74]*V[120];
    A[128] = RCT[128]*V[110]*V[120];
    A[129] = RCT[129]*V[82]*V[120];
    A[130] = RCT[130]*V[92]*V[120];
    A[131] = RCT[131]*V[55]*V[122];
    A[132] = RCT[132]*V[55]*V[119];
    A[133] = RCT[133]*V[50]*V[122];
    A[134] = RCT[134]*V[50]*V[119];
    A[135] = RCT[135]*V[84]*V[122];
    A[136] = RCT[136]*V[84]*V[122];
    A[137] = RCT[137]*V[55]*V[115];
    A[138] = RCT[138]*V[62]*V[122];
    A[139] = RCT[139]*V[97]*V[122];
    A[140] = RCT[140]*V[62]*V[115];
    A[141] = RCT[141]*V[97]*V[115];
    A[142] = RCT[142]*V[108]*V[122];
    A[143] = RCT[143]*V[106]*V[122];
    A[144] = RCT[144]*V[95]*V[122];
    A[145] = RCT[145]*V[95]*V[122];
    A[146] = RCT[146]*V[60]*V[110];
    A[147] = RCT[147]*V[74]*V[110];
    A[148] = RCT[148]*V[60]*V[110];
    A[149] = RCT[149]*V[74]*V[110];
    A[150] = RCT[150]*V[19]*V[119];
    A[151] = RCT[151]*V[108]*V[119];
    A[152] = RCT[152]*V[106]*V[119];
    A[153] = RCT[153]*V[106]*V[115];
    A[154] = RCT[154]*V[106]*V[115];
    A[155] = RCT[155]*V[82]*V[126];
    A[156] = RCT[156]*V[92]*V[126];
    A[157] = RCT[157]*V[82]*V[126];
    A[158] = RCT[158]*V[92]*V[126];
    A[159] = RCT[159]*V[52]*V[122];
    A[160] = RCT[160]*V[52]*V[122];
    A[161] = RCT[161]*V[27]*V[122];
    A[162] = RCT[162]*V[12]*V[122];
    A[163] = RCT[163]*V[15]*V[122];
    A[164] = RCT[164]*V[16]*V[122];
    A[165] = RCT[165]*V[32]*V[122];
    A[166] = RCT[166]*V[24]*V[122];
    A[167] = RCT[167]*V[26]*V[122];
    A[168] = RCT[168]*V[34]*V[122];
    A[169] = RCT[169]*V[34]*V[122];
    A[170] = RCT[170]*V[3]*V[122];
    A[171] = RCT[171]*V[45]*V[120];
    A[172] = RCT[172]*V[45]*V[114];
    A[173] = RCT[173]*V[37]*V[122];
    A[174] = RCT[174]*V[35]*V[122];
    A[175] = RCT[175]*V[40]*V[122];
    A[176] = RCT[176]*V[40]*V[122];
    A[177] = RCT[177]*V[21]*V[122];
    A[178] = RCT[178]*V[21]*V[122];
    A[179] = RCT[179]*V[63]*V[110];
    A[180] = RCT[180]*V[63]*V[110];
    A[181] = RCT[181]*V[63]*V[126];
    A[182] = RCT[182]*V[63]*V[63];
    A[183] = RCT[183]*V[63]*V[120];
    A[184] = RCT[184]*V[63]*V[114];
    A[185] = RCT[185]*V[63]*V[114];
    A[186] = RCT[186]*V[9]*V[122];
    A[187] = RCT[187]*V[33]*V[115];
    A[188] = RCT[188]*V[96]*V[119];
    A[189] = RCT[189]*V[110]*V[110];
    A[190] = RCT[190]*V[110]*V[126];
    A[191] = RCT[191]*V[110]*V[126];
    A[192] = RCT[192]*V[100]*V[110];
    A[193] = RCT[193]*V[89]*V[110];
    A[194] = RCT[194]*V[81]*V[110];
    A[195] = RCT[195]*V[86]*V[110];
    A[196] = RCT[196]*V[83]*V[110];
    A[197] = RCT[197]*V[71]*V[110];
    A[198] = RCT[198]*V[93]*V[110];
    A[199] = RCT[199]*V[66]*V[110];
    A[200] = RCT[200]*V[87]*V[110];
    A[201] = RCT[201]*V[76]*V[110];
    A[202] = RCT[202]*V[94]*V[110];
    A[203] = RCT[203]*V[79]*V[110];
    A[204] = RCT[204]*V[100]*V[110];
    A[205] = RCT[205]*V[89]*V[110];
    A[206] = RCT[206]*V[81]*V[110];
    A[207] = RCT[207]*V[86]*V[110];
    A[208] = RCT[208]*V[83]*V[110];
    A[209] = RCT[209]*V[71]*V[110];
    A[210] = RCT[210]*V[93]*V[110];
    A[211] = RCT[211]*V[87]*V[110];
    A[212] = RCT[212]*V[76]*V[110];
    A[213] = RCT[213]*V[94]*V[110];
    A[214] = RCT[214]*V[79]*V[110];
    A[215] = RCT[215]*V[66]*V[110];
    A[216] = RCT[216]*V[80]*V[110];
    A[217] = RCT[217]*V[80]*V[110];
    A[218] = RCT[218]*V[82]*V[110];
    A[219] = RCT[219]*V[92]*V[110];
    A[220] = RCT[220]*V[115]*V[115];
    A[221] = RCT[221]*V[121]*V[126];
    A[222] = RCT[222]*V[10];
    A[223] = RCT[223]*V[44]*V[119];
    A[224] = RCT[224]*V[58]*V[119];
    A[225] = RCT[225]*V[120];
    A[226] = RCT[226]*V[121];
    A[227] = RCT[227]*V[115];
    A[228] = RCT[228]*V[41]*V[112];
    A[229] = RCT[229]*V[107]*V[122];
    A[230] = RCT[230]*V[113]*V[119];
    A[231] = RCT[231]*V[102]*V[120];
    A[232] = RCT[232]*V[113]*V[120];
    A[233] = RCT[233]*V[122]*V[123];
    A[234] = RCT[234]*V[102]*V[102];
    A[235] = RCT[235]*V[102]*V[102];
    A[236] = RCT[236]*V[102]*V[114];
    A[237] = RCT[237]*V[54]*V[113];
    A[238] = RCT[238]*V[29]*V[122];
    A[239] = RCT[239]*V[59]*V[117];
    A[240] = RCT[240]*V[117]*V[123];
    A[241] = RCT[241]*V[102]*V[122];
    A[242] = RCT[242]*V[113]*V[115];
    A[243] = RCT[243]*V[111]*V[113];
    A[244] = RCT[244]*V[109]*V[113];
    A[245] = RCT[245]*V[67]*V[113];
    A[246] = RCT[246]*V[33]*V[113];
    A[247] = RCT[247]*V[14]*V[113];
    A[248] = RCT[248]*V[113]*V[121];
    A[249] = RCT[249]*V[102]*V[121];
    A[250] = RCT[250]*V[54]*V[112];
    A[251] = RCT[251]*V[59];
    A[252] = RCT[252]*V[123];
    A[253] = RCT[253]*V[59];
    A[254] = RCT[254]*V[123];
    A[255] = RCT[255]*V[96]*V[122];
    A[256] = RCT[256]*V[83]*V[114];
    A[257] = RCT[257]*V[83]*V[114];
    A[258] = RCT[258]*V[83]*V[120];
    A[259] = RCT[259]*V[58]*V[122];
    A[260] = RCT[260]*V[44]*V[122];
    A[261] = RCT[261]*V[99]*V[114];
    A[262] = RCT[262]*V[99]*V[114];
    A[263] = RCT[263]*V[99]*V[120];
    A[264] = RCT[264]*V[98]*V[114];
    A[265] = RCT[265]*V[98]*V[114];
    A[266] = RCT[266]*V[98]*V[120];
    A[267] = RCT[267]*V[43]*V[122];
    A[268] = RCT[268]*V[68]*V[122];
    A[269] = RCT[269]*V[46]*V[114];
    A[270] = RCT[270]*V[46]*V[120];
    A[271] = RCT[271]*V[46]*V[121];
    A[272] = RCT[272]*V[4];
    A[273] = RCT[273]*V[38]*V[122];
    A[274] = RCT[274]*V[49]*V[114];
    A[275] = RCT[275]*V[49]*V[114];
    A[276] = RCT[276]*V[49]*V[120];
    A[277] = RCT[277]*V[39]*V[122];
    A[278] = RCT[278]*V[48]*V[114];
    A[279] = RCT[279]*V[48]*V[114];
    A[280] = RCT[280]*V[48]*V[120];
    A[281] = RCT[281]*V[39]*V[119];
    A[282] = RCT[282]*V[30]*V[122];
    A[283] = RCT[283]*V[61]*V[122];
    A[284] = RCT[284]*V[69]*V[114];
    A[285] = RCT[285]*V[69]*V[121];
    A[286] = RCT[286]*V[69]*V[107];
    A[287] = RCT[287]*V[69]*V[112];
    A[288] = RCT[288]*V[69]*V[112];
    A[289] = RCT[289]*V[73]*V[125];
    A[290] = RCT[290]*V[73]*V[114];
    A[291] = RCT[291]*V[73]*V[121];
    A[292] = RCT[292]*V[73]*V[107];
    A[293] = RCT[293]*V[73]*V[112];
    A[294] = RCT[294]*V[73]*V[112];
    A[295] = RCT[295]*V[56]*V[125];
    A[296] = RCT[296]*V[56]*V[114];
    A[297] = RCT[297]*V[56]*V[121];
    A[298] = RCT[298]*V[56]*V[107];
    A[299] = RCT[299]*V[56]*V[112];
    A[300] = RCT[300]*V[70]*V[125];
    A[301] = RCT[301]*V[70]*V[114];
    A[302] = RCT[302]*V[70]*V[121];
    A[303] = RCT[303]*V[70]*V[107];
    A[304] = RCT[304]*V[70]*V[112];
    A[305] = RCT[305]*V[72]*V[125];
    A[306] = RCT[306]*V[72]*V[114];
    A[307] = RCT[307]*V[72]*V[121];
    A[308] = RCT[308]*V[72]*V[107];
    A[309] = RCT[309]*V[72]*V[112];
    A[310] = RCT[310]*V[72]*V[112];
    A[311] = RCT[311]*V[75]*V[125];
    A[312] = RCT[312]*V[75]*V[114];
    A[313] = RCT[313]*V[75]*V[121];
    A[314] = RCT[314]*V[75]*V[107];
    A[315] = RCT[315]*V[75]*V[112];
    A[316] = RCT[316]*V[75]*V[112];
    A[317] = RCT[317]*V[65]*V[125];
    A[318] = RCT[318]*V[65]*V[114];
    A[319] = RCT[319]*V[65]*V[121];
    A[320] = RCT[320]*V[65]*V[107];
    A[321] = RCT[321]*V[65]*V[112];
    A[322] = RCT[322]*V[65]*V[112];
    A[323] = RCT[323]*V[112]*V[118];
    A[324] = RCT[324]*V[118]*F[5];
    A[325] = RCT[325]*V[118]*F[6];
    A[326] = RCT[326]*V[118]*F[2];
    A[327] = RCT[327]*V[5]*V[118];
    A[328] = RCT[328]*V[5]*V[118];
    A[329] = RCT[329]*V[64]*V[118];
    A[330] = RCT[330]*V[64]*V[118];
    A[331] = RCT[331]*V[64]*V[118];
    A[332] = RCT[332]*V[117]*F[6];
    A[333] = RCT[333]*V[117]*V[119];
    A[334] = RCT[334]*V[122]*F[2];
    A[335] = RCT[335]*V[117]*V[122];
    A[336] = RCT[336]*V[117]*V[120];
    A[337] = RCT[337]*V[118]*V[119];
    A[338] = RCT[338]*V[118]*V[119];
    A[339] = RCT[339]*V[117]*V[121];
    A[340] = RCT[340]*V[115]*V[117];
    A[341] = RCT[341]*V[114]*V[117];
    A[342] = RCT[342]*V[117]*V[121];
    A[343] = RCT[343]*V[78]*V[117];
    A[344] = RCT[344]*V[53]*F[6];
    A[345] = RCT[345]*V[53]*V[119];
    A[346] = RCT[346]*V[53]*V[120];
    A[347] = RCT[347]*V[53]*V[120];
    A[348] = RCT[348]*V[53]*V[120];
    A[349] = RCT[349]*V[6]*F[6];
    A[350] = RCT[350]*V[6]*V[114];
    A[351] = RCT[351]*V[6]*V[121];
    A[352] = RCT[352]*V[102]*V[117];
    A[353] = RCT[353]*V[111]*V[117];
    A[354] = RCT[354]*V[118]*V[124];
    A[355] = RCT[355]*V[118]*V[123];
    A[356] = RCT[356]*V[57]*V[118];
    A[357] = RCT[357]*V[57]*V[122];
    A[358] = RCT[358]*V[105]*V[126];
    A[359] = RCT[359]*V[105]*V[122];
    A[360] = RCT[360]*V[105]*V[122];
    A[361] = RCT[361]*V[17]*V[122];
    A[362] = RCT[362]*V[11]*V[122];
    A[363] = RCT[363]*V[122]*V[124];
    A[364] = RCT[364]*V[88]*V[122];
    A[365] = RCT[365]*V[18]*V[122];
    A[366] = RCT[366]*V[85]*V[122];
    A[367] = RCT[367]*V[64]*V[116];
    A[368] = RCT[368]*V[111]*V[116];
    A[369] = RCT[369]*V[116]*V[119];
    A[370] = RCT[370]*V[116]*F[2];
    A[371] = RCT[371]*V[78]*V[116];
    A[372] = RCT[372]*V[116]*V[120];
    A[373] = RCT[373]*V[116]*V[120];
    A[374] = RCT[374]*V[105]*V[117];
    A[375] = RCT[375]*V[105]*V[120];
    A[376] = RCT[376]*V[105]*V[114];
    A[377] = RCT[377]*V[105]*V[121];
    A[378] = RCT[378]*V[105]*V[105];
    A[379] = RCT[379]*V[105]*V[105];
    A[380] = RCT[380]*V[105]*V[105];
    A[381] = RCT[381]*V[116]*F[6];
    A[382] = RCT[382]*V[23];
    A[383] = RCT[383]*V[105]*V[105];
    A[384] = RCT[384]*V[11];
    A[385] = RCT[385]*V[23]*V[116];
    A[386] = RCT[386]*V[23]*V[116];
    A[387] = RCT[387]*V[102]*V[105];
    A[388] = RCT[388]*V[102]*V[105];
    A[389] = RCT[389]*V[102]*V[105];
    A[390] = RCT[390]*V[85]*V[117];
    A[391] = RCT[391]*V[85]*V[116];
    A[392] = RCT[392]*V[41]*V[124];
    A[393] = RCT[393]*V[85]*V[112];
    A[394] = RCT[394]*V[85]*V[124];
    A[395] = RCT[395]*V[85]*V[123];
    A[396] = RCT[396]*V[54]*V[124];
    A[397] = RCT[397]*V[88]*V[124];
    A[398] = RCT[398]*V[88]*V[123];
    A[399] = RCT[399]*V[59]*V[124];
    A[400] = RCT[400]*V[119];
    A[401] = RCT[401]*V[119];
    A[402] = RCT[402]*F[6];
    A[403] = RCT[403]*V[121];
    A[404] = RCT[404]*V[78];
    A[405] = RCT[405]*V[22];
    A[406] = RCT[406]*V[111];
    A[407] = RCT[407]*V[111];
    A[408] = RCT[408]*V[90];
    A[409] = RCT[409]*V[13];
    A[410] = RCT[410]*V[20];
    A[411] = RCT[411]*V[20];
    A[412] = RCT[412]*V[115];
    A[413] = RCT[413]*V[115];
    A[414] = RCT[414]*V[41];
    A[415] = RCT[415]*V[109];
    A[416] = RCT[416]*V[109];
    A[417] = RCT[417]*V[7];
    A[418] = RCT[418]*V[103];
    A[419] = RCT[419]*V[67];
    A[420] = RCT[420]*V[67];
    A[421] = RCT[421]*V[104];
    A[422] = RCT[422]*V[84];
    A[423] = RCT[423]*V[62];
    A[424] = RCT[424]*V[62];
    A[425] = RCT[425]*V[62];
    A[426] = RCT[426]*V[97];
    A[427] = RCT[427]*V[108];
    A[428] = RCT[428]*V[108];
    A[429] = RCT[429]*V[108];
    A[430] = RCT[430]*V[106];
    A[431] = RCT[431]*V[95];
    A[432] = RCT[432]*V[52];
    A[433] = RCT[433]*V[27];
    A[434] = RCT[434]*V[12];
    A[435] = RCT[435]*V[15];
    A[436] = RCT[436]*V[16];
    A[437] = RCT[437]*V[32];
    A[438] = RCT[438]*V[26];
    A[439] = RCT[439]*V[24];
    A[440] = RCT[440]*V[34];
    A[441] = RCT[441]*V[37];
    A[442] = RCT[442]*V[43];
    A[443] = RCT[443]*V[35];
    A[444] = RCT[444]*V[40];
    A[445] = RCT[445]*V[21];
    A[446] = RCT[446]*V[101];
    A[447] = RCT[447]*V[9];
    A[448] = RCT[448]*V[68];
    A[449] = RCT[449]*V[31];
    A[450] = RCT[450]*V[44];
    A[451] = RCT[451]*V[29];
    A[452] = RCT[452]*V[102];
    A[453] = RCT[453]*V[59];
    A[454] = RCT[454]*V[54];
    A[455] = RCT[455]*V[54];
    A[456] = RCT[456]*V[2];
    A[457] = RCT[457]*V[10];
    A[458] = RCT[458]*V[10];
    A[459] = RCT[459]*V[58];
    A[460] = RCT[460]*V[61];
    A[461] = RCT[461]*V[36];
    A[462] = RCT[462]*V[5];
    A[463] = RCT[463]*V[28];
    A[464] = RCT[464]*V[114];
    A[465] = RCT[465]*V[25];
    A[466] = RCT[466]*V[57];
    A[467] = RCT[467]*V[105];
    A[468] = RCT[468]*V[17];
    A[469] = RCT[469]*V[11];
    A[470] = RCT[470]*V[18];
    A[471] = RCT[471]*V[85];
    A[472] = RCT[472]*V[85];
    A[473] = RCT[473]*V[88];
    A[474] = RCT[474]*V[23];

    /* Computation of prod/loss families */

    familyRate[0] = A[5] + A[347] + A[349] + A[350] + A[351] + 0.09*A[354] + \
                    0.2*A[355] + 0.25*A[356] + 2*A[402] + A[403] + A[412] +  \
                    A[452] + A[464] + A[467] + A[468] + A[462] + 0.25*A[68] +\
                    0.15*A[128] + 0.15*A[129] + 0.15*A[130];
    familyRate[1] = A[239] + A[240] + A[332] + A[333] + A[335] + A[336] + \
                    A[339] + A[340] + A[341] + A[342] + A[343] + A[352] + \
                    A[353] + A[374] + A[390] + A[323] + A[326] + A[327] + \
                    A[328] + A[329] + A[330] + A[331] + A[337] + A[354] + \
                    A[355] + A[356] + A[401] + A[0] + A[1] + A[2] + A[3] +\
                    A[4] + A[73] + A[132] + A[134] + A[150] + A[151] +    \
                    A[152] + A[188] + A[223] + A[224] + A[230] + A[281] + \
                    A[332] + A[333] + A[337] + A[345] + A[369] + A[401];
    familyRate[2] = A[350] + A[351] + A[24] + A[51] + A[75] + A[185] +     \
                    A[257] + A[262] + A[265] + A[275] + A[279] + A[350] +  \
                    A[32] + A[36] + A[37] + A[39] + A[63] + A[64] + A[80] +\
                    A[90] + A[107] + A[137] + A[140] + A[141] + A[153] +   \
                    A[154] + A[187] + A[227] + A[22] + A[26] + A[32] +     \
                    A[40] + 0.04*A[53] + 0.07*A[54] + 0.117*A[55] +        \
                    0.12*A[57] + 0.15*A[58] + A[67] + A[84]+ A[86] +       \
                    A[221] + A[226] + A[248] + A[249] + A[271] + A[351] +  \
                    A[377];
    familyRate[3] = A[22] + A[37] + A[39] + 0.6*A[64] + A[80] + A[90] +   \
                    A[107] + A[140] + A[141] + A[154] + A[185] + A[187] + \
                    0.5*A[226] + A[227] + 2*A[228] + A[250] + A[257] +    \
                    A[262] + A[265] + A[275] + A[279] + A[392] + A[393] + \
                    A[394] + A[395] + A[396];
    familyRate[4] = A[21] + A[37] + 0.05*A[38] + 0.728*A[58] + A[59] +        \
                    0.5*A[60] + A[65] + A[66] + 0.5*A[89] + 0.075*A[101] +    \
                    0.33*A[114] + 0.595*A[116] + 0.375*A[117] + 0.39*A[130] + \
                    0.56*A[132] + A[133] + 0.505*A[135] + A[136] + 2*A[138] + \
                    A[139] + 2*A[140] + A[141] + 0.5*A[145] + 0.512*A[150] +  \
                    0.56*A[151] + 0.767*A[152] + 0.251*A[171] + 0.251*A[172] +\
                    0.89*A[188] + 0.09*A[196] + 0.857*A[198] + 0.5*A[201] +   \
                    A[243] + A[244] + A[245] + A[246] + A[247] + 0.09*A[256] +\
                    1.5*A[273] + A[353] + A[368] + A[406] + A[407] +          \
                    0.88*A[415] + A[416] + A[418] + A[420] + A[422] +         \
                    2*A[423] + 2*A[424] + A[425] + A[426] + A[427] + A[428] + \
                    A[430] + 0.67*A[441] + 0.5*A[444] + 0.5*A[448] + A[460];
    familyRate[5] = A[11] + A[289] + A[295] + A[300] + A[305] + A[311] + A[317];
    familyRate[6] = A[229] + A[286] + A[292] + A[298] + A[303] + A[308] +     \
                    A[314] + A[320];
    familyRate[7] = A[12] + A[329] + A[330] + A[331] + A[367];
    familyRate[8] = A[6] + A[10] + A[287] + A[294] + A[299] + A[304] + A[310] +\
                    A[315] + A[321];


} /* End of ComputeFamilies */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

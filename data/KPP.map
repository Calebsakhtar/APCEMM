/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/*                                                                  */
/* Map File with Human-Readable Information                         */
/*                                                                  */
/* Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  */
/*       (http://www.cs.vt.edu/~asandu/Software/KPP)                */
/* KPP is distributed under GPL, the general public licence         */
/*       (http://www.gnu.org/copyleft/gpl.html)                     */
/* (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           */
/* (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            */
/*     With important contributions from:                           */
/*        M. Damian, Villanova University, USA                      */
/*        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany */
/*                                                                  */
/* File                 : KPP.map                                   */
/* Time                 : Tue Sep  4 17:12:00 2018                  */
/* Equation file        : KPP.kpp                                   */
/* Output root filename : KPP                                       */
/*                                                                  */
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */



### Options -------------------------------------------

FUNCTION - AGGREGATE
JACOBIAN - SPARSE W/ ACCOUNT FOR LU DECOMPOSITION FILL-IN
DOUBLE   - ON
REORDER  - ON

### Parameters ----------------------------------------

#define NSPEC                135         /* Number of chemical species */
#define NVAR                 127         /* Number of Variable species */
#define NVARACT              126         /* Number of Active species */
#define NFIX                 8           /* Number of Fixed species */
#define NREACT               475         /* Number of reactions */
#define NVARST               0           /* Starting of variables in conc. vect. */
#define NFIXST               127         /* Starting of fixed in conc. vect. */

### Species -------------------------------------------

Variable species
  1 = CO2 (n)    44 = ISNP (r)   87 = RIO2 (r)  
  2 = PPN (r)    45 = ISOPNB (r) 88 = R4N1 (r)  
  3 = BrNO2 (r)  46 = IEPOXOO (r) 89 = HOCl (r)  
  4 = IEPOX (r)  47 = MACRNO2 (r) 90 = ATO2 (r)  
  5 = PMNN (r)   48 = ROH (r)    91 = HNO3 (r)  
  6 = N2O (r)    49 = MOBAOO (r) 92 = ISN1 (r)  
  7 = N (r)      50 = DIBOO (r)  93 = MAO3 (r)  
  8 = PAN (r)    51 = PMN (r)    94 = MRO2 (r)  
  9 = ALK4 (r)   52 = ISNOOB (r) 95 = INO2 (r)  
 10 = MAP (r)    53 = INPN (r)   96 = HAC (r)   
 11 = MPN (r)    54 = H (r)      97 = HC5 (r)   
 12 = Cl2O2 (r)  55 = BrNO3 (r)  98 = MGLY (r)  
 13 = ETP (r)    56 = PRPE (r)   99 = ISOPNBO2 (r)
 14 = HNO2 (r)   57 = MVKOO (r) 100 = ISOPNDO2 (r)
 15 = C3H8 (r)   58 = Cl2 (r)   101 = R4O2 (r)  
 16 = RA3P (r)   59 = ISOPND (r)102 = R4N2 (r)  
 17 = RB3P (r)   60 = HOBr (r)  103 = BrO (r)   
 18 = OClO (r)   61 = A3O2 (r)  104 = RCHO (r)  
 19 = ClNO2 (r)  62 = PROPNN (r)105 = MEK (r)   
 20 = ISOP (r)   63 = GLYX (r)  106 = ClO (r)   
 21 = HNO4 (r)   64 = MAOPO2 (r)107 = MACR (r)  
 22 = MAOP (r)   65 = CH4 (r)   108 = SO2 (r)   
 23 = MP (r)     66 = GAOO (r)  109 = MVK (r)   
 24 = ClOO (r)   67 = B3O2 (r)  110 = ALD2 (r)  
 25 = RP (r)     68 = ACET (r)  111 = MCO3 (r)  
 26 = BrCl (r)   69 = MACRN (r) 112 = CH2O (r)  
 27 = PP (r)     70 = CH2OO (r) 113 = H2O (r)   
 28 = PRPN (r)   71 = MGLYOO (r)114 = Br (r)    
 29 = SO4 (r)    72 = VRO2 (r)  115 = NO (r)    
 30 = Br2 (r)    73 = MGLOO (r) 116 = NO3 (r)   
 31 = ETHLN (r)  74 = MACROO (r)117 = Cl (r)    
 32 = MVKN (r)   75 = PO2 (r)   118 = O (r)     
 33 = R4P (r)    76 = CH3CHOO (r)119 = O1D (r)   
 34 = C2H6 (r)   77 = MAN2 (r)  120 = O3 (r)    
 35 = RIP (r)    78 = ISNOOA (r)121 = HO2 (r)   
 36 = VRP (r)    79 = H2O2 (r)  122 = NO2 (r)   
 37 = ATOOH (r)  80 = PRN1 (r)  123 = OH (r)    
 38 = IAP (r)    81 = ETO2 (r)  124 = HBr (r)   
 39 = DHMOB (r)  82 = KO2 (r)   125 = HCl (r)   
 40 = MOBA (r)   83 = RCO3 (r)  126 = CO (r)    
 41 = MRP (r)    84 = HC5OO (r) 127 = MO2 (r)   
 42 = N2O5 (r)   85 = GLYC (r)  
 43 = ISNOHOO (r) 86 = ClNO3 (r) 

Fixed species
  1 = ACTA (r)    4 = HCOOH (r)   7 = O2 (r)    
  2 = EOH (r)     5 = MOH (r)     8 = RCOOH (n) 
  3 = H2 (r)      6 = N2 (r)    

### Subroutines ---------------------------------------

void Fun( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double RCT[],                          /* Rate constants (local) */
  double Vdot[]                          /* Time derivative of variable species concentrations */
)void Jac_SP( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double RCT[],                          /* Rate constants (local) */
  double JVS[]                           /* sparse Jacobian of variables */
)void Jac_SP_Vec( 
  double JVS[],                          /* sparse Jacobian of variables */
  double UV[],                           /* User vector for variables */
  double JUV[]                           /* Jacobian times user vector */
)void JacTR_SP_Vec( 
  double JVS[],                          /* sparse Jacobian of variables */
  double UV[],                           /* User vector for variables */
  double JTUV[]                          /* Jacobian transposed times user vector */
)void KppSolve( 
  double JVS[],                          /* sparse Jacobian of variables */
  double X[]                             /* Vector for variables */
)void KppSolveTR( 
  double JVS[],                          /* sparse Jacobian of variables */
  double X[],                            /* Vector for variables */
  double XX[]                            /* Vector for output variables */
)void Hessian( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double RCT[],                          /* Rate constants (local) */
  double HESS[]                          /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
)void HessTR_Vec( 
  double HESS[],                         /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  double U1[],                           /* User vector */
  double U2[],                           /* User vector */
  double HTU[]                           /* Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2  */
)void Hess_Vec( 
  double HESS[],                         /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  double U1[],                           /* User vector */
  double U2[],                           /* User vector */
  double HU[]                            /* Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2 */
)void Initialize( 
)void Shuffle_user2kpp( 
  double V_USER[],                       /* Concentration of variable species in USER's order */
  double V[]                             /* Concentrations of variable species (local) */
)void Shuffle_kpp2user( 
  double V[],                            /* Concentrations of variable species (local) */
  double V_USER[]                        /* Concentration of variable species in USER's order */
)void Update_RCONST( 
)void Update_PHOTO( 
)void GetMass( 
  double CL[],                           /* Concentration of all species (local) */
  double Mass[]                          /* value of mass balance */
)void ReactantProd( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double ARP[]                           /* Reactant product in each equation */
)void JacReactantProd( 
  double V[],                            /* Concentrations of variable species (local) */
  double F[],                            /* Concentrations of fixed species (local) */
  double JVRP[]                          /* d ARP(1:NREACT)/d VAR (1:NVAR) */
)
